{
    "components": {
        "examples": {
            "DateInPast": {
                "description": "Example of a date in the past",
                "value": {
                    "epoch": "1485183550.84644,",
                    "iso8601": "2017-01-23T14:59:10.846440Z",
                    "rfc2822": "Mon, 23 Jan 2017 14:59:10 GMT",
                    "rfc3339": "2017-01-23T14:59:10.84Z",
                    "slang_date\"": "Jan 23",
                    "slang_time\"": "4 months ago"
                }
            },
            "Now": {
                "value": {
                    "epoch": 1498229228.0671656,
                    "iso8601": "2017-06-23T14:47:08.067166Z",
                    "rfc2822": "Fri, 23 Jun 2017 14:47:08 GMT",
                    "rfc3339": "2017-06-23T14:47:08.06Z",
                    "slang_date": "today",
                    "slang_time": "now"
                }
            },
            "headers": {
                "value": {
                    "Accept": "*/*",
                    "Connection": "close",
                    "Host": "httpbin.org",
                    "User-Agent": "curl/7.37.0"
                }
            }
        },
        "parameters": {
            "freeFormQuery": {
                "description": "Enter free-form query parameters in the JSON format `{ \"param1\": \"value1\", \"param2\": \"value2\", ... }`. Note that the parameters will be actually sent as `?param1=value1\u0026param2=value2\u0026...`\n",
                "explode": true,
                "in": "query",
                "name": "freeform",
                "schema": {
                    "additionalProperties": true,
                    "type": "object"
                },
                "style": "form"
            },
            "password": {
                "description": "Password. Use the same password in the path AND for authorization.",
                "in": "path",
                "name": "password",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "user": {
                "description": "Username. Use the same username in the path AND for authorization.",
                "in": "path",
                "name": "user",
                "required": true,
                "schema": {
                    "type": "string"
                }
            }
        },
        "responses": {
            "200BasicAuth": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "authenticated": {
                                    "example": true,
                                    "type": "boolean"
                                },
                                "user": {
                                    "description": "The user name specified in the request.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "description": "OK"
            },
            "Image": {
                "content": {
                    "image/png, image/jpeg, image/webp": {
                        "schema": {
                            "format": "binary",
                            "type": "string"
                        }
                    },
                    "image/svg": {},
                    "image/svg+xml": {}
                },
                "description": "OK"
            },
            "TimestampResponse": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/TimestampWrapper"
                        }
                    }
                },
                "description": "OK"
            }
        },
        "schemas": {
            "CommonResponse": {
                "description": "Response returned by `/get`",
                "properties": {
                    "args": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Query string parameters specified in the request URL.",
                        "type": "object"
                    },
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Headers (standard or custom) used in the request. Some typical headers are:\n  - Accept\n  - Accept-Encoding\n  - Content-Length\n  - Content-Type\n  - Host\n  - Origin\n  - Referred\n  - User-Agent\n",
                        "type": "object"
                    },
                    "origin": {
                        "description": "The origin IP from which the request was made.",
                        "example": "10.100.10.10, 10.100.10.44, 52.91.14.13",
                        "type": "string"
                    },
                    "url": {
                        "description": "The endpoint URL to which the request was made.",
                        "example": "https://httpbin.org/post",
                        "format": "uri",
                        "type": "string"
                    }
                },
                "required": [
                    "args",
                    "headers",
                    "origin",
                    "url"
                ],
                "type": "object"
            },
            "PostResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CommonResponse"
                    },
                    {
                        "properties": {
                            "data": {},
                            "files": {},
                            "form": {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "description": "Form parameters specified in \"application/x-www-form-urlencoded\" and `multipart/form-data` requests.\n",
                                "type": "object"
                            },
                            "json": {
                                "description": "JSON value sent in the payload. Can be object, array, string, number, boolean or `null`.\n",
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                ],
                "description": "Response returned by /post, /put, /patch and /delete"
            },
            "Timestamp": {
                "example": {
                    "epoch": 1485183550.84644,
                    "iso8601": "2017-01-23T14:59:10.846440Z",
                    "rfc2822": "Mon, 23 Jan 2017 14:59:10 GMT",
                    "rfc3339": "2017-01-23T14:59:10.84Z",
                    "slang_date": "Jan 23",
                    "slang_time": "4 months ago"
                },
                "properties": {
                    "epoch": {
                        "example": 1498229228.0671656,
                        "format": "double",
                        "type": "number"
                    },
                    "iso8601": {
                        "example": "2017-06-23T14:47:08.067166Z",
                        "type": "string"
                    },
                    "rfc2822": {
                        "example": "Fri, 23 Jun 2017 14:47:08 GMT",
                        "type": "string"
                    },
                    "rfc3339": {
                        "example": "2017-06-23T14:47:08.06Z",
                        "type": "string"
                    },
                    "slang_date": {
                        "example": "today",
                        "type": "string"
                    },
                    "slang_time": {
                        "example": "now",
                        "type": "string"
                    }
                },
                "required": [
                    "epoch",
                    "slang_date",
                    "slang_time",
                    "iso8601",
                    "rfc2822",
                    "rfc3339"
                ],
                "type": "object"
            },
            "TimestampWrapper": {
                "properties": {
                    "timestamp": {
                        "$ref": "#/components/schemas/Timestamp"
                    }
                },
                "required": [
                    "timestamp"
                ],
                "type": "object"
            }
        },
        "securitySchemes": {
            "authToken": {
                "in": "header",
                "name": "Authorization",
                "type": "apiKey"
            },
            "basicAuth": {
                "description": "Use the same username and password as you will provide in path parameters.",
                "scheme": "basic",
                "type": "http"
            },
            "bearerAuth": {
                "scheme": "bearer",
                "type": "http"
            },
            "jwtAuth": {
                "bearerFormat": "JWT",
                "scheme": "bearer",
                "type": "http"
            }
        }
    },
    "externalDocs": {
        "url": "http://httpbin.org/legacy"
    },
    "info": {
        "contact": {},
        "description": "An unofficial OpenAPI definition for [httpbin.org](https://httpbin.org).",
        "title": "httpbin",
        "version": "1.0"
    },
    "openapi": "3.0.1",
    "paths": {
        "/": {
            "get": {
                "operationId": "GET",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "now": {
                                            "$ref": "#/components/schemas/Timestamp"
                                        },
                                        "urls": {
                                            "example": [
                                                "/",
                                                "/docs",
                                                "/when/:human-timestamp",
                                                "/parse/:machine-timestamp"
                                            ],
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "now",
                                        "urls"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "servers": [
                    {
                        "url": "https://now.httpbin.org"
                    },
                    {
                        "url": "http://now.httpbin.org"
                    }
                ],
                "summary": "The current time, in a variety of formats",
                "tags": [
                    "time"
                ]
            }
        },
        "/basic-auth/{user}/{password}": {
            "get": {
                "operationId": "basic-auth/{user}/{password}GET",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/user"
                    },
                    {
                        "$ref": "#/components/parameters/password"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200BasicAuth"
                    },
                    "401": {
                        "description": "Unauthorized (The username and password used for Basic auth do not match those in the URL path.)",
                        "headers": {
                            "Www-Authenticate": {
                                "schema": {
                                    "example": "Basic realm=\"Fake Realm\"",
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "summary": "Challenges HTTPBasic Auth.",
                "tags": [
                    "auth"
                ]
            }
        },
        "/bearer": {
            "get": {
                "operationId": "bearerGET",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "authenticated": {
                                            "example": true,
                                            "type": "boolean"
                                        },
                                        "token": {
                                            "description": "Bearer token specified in the request",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Authorized"
                    },
                    "404": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "summary": "Tests Bearer authentication",
                "tags": [
                    "auth"
                ]
            }
        },
        "/cache": {
            "get": {
                "operationId": "cacheGET",
                "parameters": [
                    {
                        "description": "For testing purposes this header accepts any value. (???) See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since\n",
                        "in": "header",
                        "name": "If-Modified-Since",
                        "schema": {
                            "example": "Wed, 21 Oct 2015 07:28:00 GMT",
                            "type": "string"
                        }
                    },
                    {
                        "description": "For testing purposes this header accepts any value. (???) See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match\n",
                        "examples": {
                            "asterisk": {
                                "value": "*"
                            },
                            "etag": {
                                "value": "\"bfc13a64729c4290ef5b2c2730249c88ca92d82d\""
                            },
                            "etags": {
                                "value": "W/\"67ab43\", \"54ed21\", \"7892dd\""
                            }
                        },
                        "in": "header",
                        "name": "If-None-Match",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Neigher If-Modified-Since nor If-None-Match header is provided"
                    },
                    "304": {
                        "description": "If-Modified-Since or If-None-Match header is provided"
                    }
                },
                "summary": "Returns 200 unless an If-Modified-Since or If-None-Match header is provided, when it returns a 304."
            }
        },
        "/cookies": {
            "get": {
                "operationId": "cookiesGET",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "summary": "Returns cookie data",
                "tags": [
                    "Cookies"
                ]
            }
        },
        "/cookies/delete": {
            "get": {
                "operationId": "cookies/deleteGET",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/freeFormQuery"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "summary": "Delete one or more simple cookies",
                "tags": [
                    "Cookies"
                ]
            }
        },
        "/cookies/set": {
            "get": {
                "operationId": "cookies/setGET",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/freeFormQuery"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "summary": "Sets one or more simple cookies",
                "tags": [
                    "Cookies"
                ]
            }
        },
        "/delay/{n}": {
            "get": {
                "operationId": "delay/{n}GET",
                "parameters": [
                    {
                        "description": "Response delay, in seconds.",
                        "in": "path",
                        "name": "n",
                        "required": true,
                        "schema": {
                            "maximum": 10,
                            "minimum": 0,
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "OK"
                    }
                },
                "summary": "Delays responding for min(n, 10) seconds."
            }
        },
        "/delete": {
            "delete": {
                "operationId": "deleteDELETE",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/freeFormQuery"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "summary": "Returns the DELETE request's data. Accepts any query parameters and any headers.\n",
                "tags": [
                    "HTTP methods"
                ]
            }
        },
        "/get": {
            "get": {
                "operationId": "getGET",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/freeFormQuery"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Returns the GET request's data. Accepts any query parameters and any headers.\n",
                "tags": [
                    "HTTP methods"
                ]
            }
        },
        "/headers": {
            "get": {
                "operationId": "headersGET",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "headers": {
                                            "additionalProperties": {
                                                "type": "string"
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "headers"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Returns the request headers."
            }
        },
        "/hidden-basic-auth/{user}/{password}": {
            "get": {
                "description": "Returns 404 Not Found unless the request is authenticated.",
                "operationId": "hidden-basic-auth/{user}/{password}GET",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/user"
                    },
                    {
                        "$ref": "#/components/parameters/password"
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200BasicAuth"
                    },
                    "404": {
                        "description": "Unautorized (the username and password used for Basic auth do not match those in the URL path.)"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "summary": "Hidden Basic authentication",
                "tags": [
                    "auth"
                ]
            }
        },
        "/html": {
            "get": {
                "operationId": "htmlGET",
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {}
                        },
                        "description": "OK"
                    }
                },
                "summary": "Returns an HTML page"
            }
        },
        "/image": {
            "get": {
                "operationId": "imageGET",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Image"
                    },
                    "406": {
                        "description": "Client did not request a supported media type."
                    }
                },
                "summary": "Returns an image based on the Accept header.",
                "tags": [
                    "images"
                ]
            }
        },
        "/image/{format}": {
            "get": {
                "operationId": "image/{format}GET",
                "parameters": [
                    {
                        "in": "path",
                        "name": "format",
                        "required": true,
                        "schema": {
                            "enum": [
                                "png",
                                "jpeg",
                                "webp",
                                "svg"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Image"
                    }
                },
                "summary": "Returns an image with the specified format.",
                "tags": [
                    "images"
                ]
            }
        },
        "/ip": {
            "get": {
                "operationId": "ipGET",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "multipleIps": {
                                        "description": "Example of multiple IPs",
                                        "value": {
                                            "origin": "10.100.10.10, 10.100.20.254, 52.91.14.13"
                                        }
                                    },
                                    "oneIp": {
                                        "description": "Example of a single IP",
                                        "value": {
                                            "origin": "10.100.10.10"
                                        }
                                    }
                                },
                                "schema": {
                                    "properties": {
                                        "origin": {
                                            "description": "The IP address, or a comma-separated list of IP addresses. For example, \"10.100.10.10, 10.100.20.254, 52.91.14.13\"'\n",
                                            "example": "10.100.10.10",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "origin"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Returns Origin IP."
            }
        },
        "/parse/{machine-timestamp}": {
            "get": {
                "operationId": "parse/{machine-timestamp}GET",
                "parameters": [
                    {
                        "in": "path",
                        "name": "machine-timestamp",
                        "required": true,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TimestampResponse"
                    },
                    "500": {
                        "description": "oops"
                    }
                },
                "servers": [
                    {
                        "url": "http://now.httpbin.org"
                    },
                    {
                        "url": "https://now.httpbin.org"
                    }
                ],
                "tags": [
                    "time"
                ]
            }
        },
        "/post": {
            "post": {
                "operationId": "postPOST",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/freeFormQuery"
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {}
                        },
                        "application/json": {
                            "example": {
                                "message": "Hello, world!"
                            },
                            "schema": {}
                        },
                        "application/vnd+json": {
                            "examples": {
                                "pizzaOrder": {
                                    "description": "Longer description ...",
                                    "summary": "Pizza order data",
                                    "value": {
                                        "comments": "Ring the door bell three times",
                                        "custemail": "alice@wonderland.net",
                                        "custname": "Alice",
                                        "custtel": "+1-202-555-0100",
                                        "delivery": "19:00",
                                        "size": "medium",
                                        "topping": [
                                            "cheese",
                                            "mushroom"
                                        ]
                                    }
                                },
                                "simpleObject": {
                                    "summary": "sample object",
                                    "value": {
                                        "foo": "bar"
                                    }
                                }
                            },
                            "schema": {}
                        },
                        "application/x-www-form-urlencoded": {
                            "examples": {
                                "pizzaOrder": {
                                    "description": "Longer description ...",
                                    "summary": "Pizza order data",
                                    "value": {
                                        "comments": "Ring the door bell three times",
                                        "custemail": "alice@wonderland.net",
                                        "custname": "Alice",
                                        "custtel": "+1-202-555-0100",
                                        "delivery": "19:00",
                                        "size": "medium",
                                        "topping": [
                                            "cheese",
                                            "mushroom"
                                        ]
                                    }
                                },
                                "simpleObject": {
                                    "summary": "sample object",
                                    "value": {
                                        "foo": "bar"
                                    }
                                }
                            },
                            "schema": {
                                "properties": {
                                    "comments": {
                                        "description": "Comments",
                                        "example": "ASAP",
                                        "type": "string"
                                    },
                                    "custemail": {
                                        "description": "Customer email address",
                                        "example": "alice@wonderland.net",
                                        "format": "email",
                                        "type": "string"
                                    },
                                    "custname": {
                                        "description": "Customer name",
                                        "example": "Alice",
                                        "type": "string"
                                    },
                                    "custtel": {
                                        "description": "Customer phone number",
                                        "example": "+1-202-555-0100",
                                        "type": "string"
                                    },
                                    "delivery": {
                                        "description": "Delivery time",
                                        "example": "13:30",
                                        "type": "string"
                                    },
                                    "size": {
                                        "description": "Pizza size",
                                        "enum": [
                                            "small",
                                            "medium",
                                            "large"
                                        ],
                                        "type": "string"
                                    },
                                    "topping": {
                                        "description": "Pizza toppings",
                                        "items": {
                                            "enum": [
                                                "bacon",
                                                "cheese",
                                                "mushroom",
                                                "onion"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "application/xml": {
                            "example": {
                                "message": "Hello, world!"
                            },
                            "schema": {
                                "type": "object"
                            }
                        },
                        "text/plain": {
                            "schema": {
                                "example": "Hi there",
                                "type": "string"
                            }
                        }
                    },
                    "description": "Data provided in the request body will be returned in the response."
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommonResponse"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Returns the POSTed data",
                "tags": [
                    "HTTP methods"
                ]
            }
        },
        "/status/{statusCode}": {
            "delete": {
                "operationId": "status/{statusCode}DELETE",
                "responses": {
                    "default": {
                        "description": "A response with the requested status code."
                    }
                },
                "tags": [
                    "Status codes"
                ]
            },
            "get": {
                "operationId": "status/{statusCode}GET",
                "responses": {
                    "default": {
                        "description": "A response with the requested status code."
                    }
                },
                "tags": [
                    "Status codes"
                ]
            },
            "parameters": [
                {
                    "description": "The status code to return, or a weighted list of statuses to pick from, such as `200:4,500:0.3,418`.",
                    "in": "path",
                    "name": "statusCode",
                    "required": true,
                    "schema": {
                        "example": [
                            "200:5",
                            "500:0.3",
                            418
                        ],
                        "items": {
                            "description": "HTTP status code. May include optional weight, e.g. `200:0.9`",
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "minItems": 1,
                        "type": "array"
                    },
                    "style": "simple"
                }
            ],
            "patch": {
                "operationId": "status/{statusCode}PATCH",
                "responses": {
                    "default": {
                        "description": "A response with the requested status code."
                    }
                },
                "tags": [
                    "Status codes"
                ]
            },
            "post": {
                "operationId": "status/{statusCode}POST",
                "responses": {
                    "default": {
                        "description": "A response with the requested status code."
                    }
                },
                "tags": [
                    "Status codes"
                ]
            },
            "put": {
                "operationId": "status/{statusCode}PUT",
                "responses": {
                    "default": {
                        "description": "A response with the requested status code."
                    }
                },
                "tags": [
                    "Status codes"
                ]
            },
            "summary": "Returns the specified HTTP status code, or a random status code if more than one are given"
        },
        "/user-agent": {
            "get": {
                "operationId": "user-agentGET",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user-agent": {
                                            "example": "curl/7.37.0",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "user-agent"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "summary": "Returns the user agent."
            }
        },
        "/when/{human-timestamp}": {
            "get": {
                "operationId": "when/{human-timestamp}GET",
                "parameters": [
                    {
                        "in": "path",
                        "name": "human-timestamp",
                        "required": true,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TimestampResponse"
                    },
                    "500": {
                        "description": "oops"
                    }
                },
                "servers": [
                    {
                        "url": "http://now.httpbin.org"
                    },
                    {
                        "url": "https://now.httpbin.org"
                    }
                ],
                "tags": [
                    "time"
                ]
            }
        },
        "/xml": {
            "get": {
                "operationId": "xmlGET",
                "responses": {
                    "200": {
                        "content": {
                            "application/xml": {}
                        },
                        "description": "OK"
                    }
                },
                "summary": "Returns some XML."
            }
        }
    },
    "security": [
        {
            "authToken": []
        }
    ],
    "servers": [
        {
            "url": "http://localhost:8080/httpbin-yuki"
        },
        {
            "url": "https://httpbin.org"
        },
        {
            "url": "http://httpbin.org"
        },
        {
            "url": "https://eu.httpbin.org"
        },
        {
            "url": "http://eu.httpbin.org"
        }
    ],
    "tags": [
        {
            "description": "Operations for testing various authentication types",
            "name": "auth"
        },
        {
            "description": "Operations for testing different HTTP methods",
            "name": "HTTP methods"
        },
        {
            "description": "Return the specified HTTP status code, or a random status code if more than one are given",
            "name": "Status codes"
        }
    ]
}
